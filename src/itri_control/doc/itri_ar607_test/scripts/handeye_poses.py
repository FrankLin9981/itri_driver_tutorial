#! /usr/bin/env python
import sys
import rospy
import tf
import moveit_commander
import copy
from math import pi
import geometry_msgs

def open_gripper(group, w):
   group.set_named_target("open")
   group.go(wait=w)
   group.stop()

def close_gripper(group, w):
   group.set_named_target("close")
   group.go(wait=w)
   group.stop()

def go_home(group, w):
   group.set_named_target("HOME")
   group.go(wait=w)
   group.stop()

def go_to_joint_state(group, joint_goal, w):
   group.go(joint_goal, wait=w)
   group.stop()

def go_to_pose_goal(group, pose_goal, w):
   group.set_pose_target(pose_goal)
   group.go(wait=w)
   group.stop()
   group.clear_pose_targets()

def plan_cartesian_path(group, waypoints):
   # We want the Cartesian path to be interpolated at a resolution of 1 cm
   # which is why we will specify 0.01 as the eef_step in Cartesian
   # translation.  We will disable the jump threshold by setting it to 0.0 disabling:
   (plan, fraction) = group.compute_cartesian_path(
                                    waypoints,   # waypoints to follow
                                    0.01,        # eef_step
                                    0.0)         # jump_threshold
   # print(plan)
   # Note: We are just planning, not asking move_group to actually move the robot yet:
   return plan, fraction

def execute_plan(group, plan, w):
   ## Executing a Plan
   ## ^^^^^^^^^^^^^^^^
   ## Use execute if you would like the robot to follow
   ## the plan that has already been computed:
   group.execute(plan, wait=w)

def main():
   moveit_commander.roscpp_initializer.roscpp_initialize(sys.argv)
   rospy.init_node('handeye_poses', anonymous=True)
   robot = moveit_commander.robot.RobotCommander()

   arm_group = moveit_commander.MoveGroupCommander("manipulator")

   js_list = [[0, 0.2738, -0.4049, 0, -1.434, 0],
               [-0.1408, 0.2681, -0.4331, 0.4470, -1.4772, -0.2006],
               [0.1186, 0.2698, -0.4244, -0.3738, -1.4642, 0.1693],
               [0.08079890732487094, -0.053222206781589065, -0.16756386116298572, -0.33828068756366303, -1.6476699781848358, 0.15663523064303853],
               [-0.11532036973427306, -0.02896725791703325, -0.19565156632396263, 0.40535985592845325, -1.5891116763497166, -0.010912791536672906],
               [-0.032050841747092385, 0.010303931663911747, -0.20232487938224697, 0.08653788094660708, -1.4677235947949914, -0.5667567339301982],
               [-0.031878071099859184, 0.01016576447257389, -0.20225816443465394, 0.08642281837238386, -1.467724508253733, 0.5186314248107466],
               [-0.02270953779674567, 0.16299385057497862, -0.3586739080100294, 0.059694026967489044, -1.047834798482647, -5.705103800155899],
               [-0.1289504189682118, -0.1857254100711394, -0.1655129124155641, 0.3202721002292579, -1.3688678797798755, -5.9360889297157655],
               [0.21104561196106708, -0.5521769533770264, 0.14843556916948142, -0.2214582298361547, -1.6968188732175982, -5.572574735332889],
               [-0.37370191006372355, -0.08255666364870695, -0.6893647073990596, 0.47459646712702064, -1.039250809290996, -0.08502304400189153],
               [-0.2379802792489425, -0.6953561643744628, 0.07925248216327141, 0.34523402279983895, -1.4627356484294616, -0.3434794764689677],
               [-0.24429854368273762, -0.6990869554474912, 0.07965491541266445, 0.3422507097646035, -1.461224773564858, -0.3498129520652533],
               [-0.0037192994464296802, -1.049157158805687, 0.7069313040321568, 0.02171886735393791, -1.6368552262923837, 0.41959930199615947],
               [-0.16824937124356865, -0.9133390244552961, 0.33461111838105406, 0.01926378969360254, -1.406528892589514, -0.05358312191495607],
               [0.6762276287681708, -0.8147315454936459, -0.32047930085543985, -0.8888759413677212, -0.8557125049995262, -4.6120613861015585],
               [-0.2544640250968184, -0.7123682370498612, 0.14738672287782784, 0.335750325243124, -1.5157470279361682, -0.3393833035661453],
               [0.4795920304658896, -0.8313235535561851, -0.2453841430742152, 2.7855348948355587, 0.606658420085032, 5.602054568525097],
               [-0.137344597962338, -0.4932705774059265, -0.6323090091353558, -2.397381126514791, 0.541005023206691, 4.005014856943347],
               [-0.36606403510840835, 0.3434727931872601, -0.8199175738132238, 0.03785148192480037, -0.6048950761139951, -0.3074655576561076],
               [-3.5186963928346415e-05, -0.009885936000920026, -0.5683484631751021, -8.390391935364505e-05, -0.6941767004568096, 2.4642056679624602e-05],
               [-0.5766836574559306, -0.6876133202086239, -0.23091397810474845, 0.6143209501486195, -0.7722476760939827, -1.0878926125090214],
               [-0.2574598287984431, -0.69186321270268, 0.12179730054815696, 0.33417987097948654, -1.5116080134790986, -0.3436348100122819],
               [0.0027723951063052255, -0.9973894317077434, 0.42437278489006225, 0.007754756403268281, -1.5242477825417282, -0.022047587661387702],
               [-0.15279454092410916, -0.4729824884176841, -0.05428205134750819, 0.18466118722534297, -1.4561812073331613, -0.7055490447245321],
               [-0.30509206375221964, 0.03278316845347273, -0.8633072404664084, 0.2581005999601427, -0.53409057355241, -0.851345487440974],
               [-0.6840702302634556, -0.37265819229199515, -0.09936470048223622, 0.3633781300293881, -1.334036839630805, -4.184279368837018],
               [-0.1879309268785896, -0.11246362279326938, -0.3324652708344482, -0.2574923394546067, -0.8978013371548332, -3.3717006259216227],
               [0.49318018702769084, -0.18423754164287853, -0.5111922658428103, -0.4136822448966573, -0.85736001423603, -2.5582444877225097],
               [0.4908922653527936, -0.3053457687703762, -0.17377727414681754, -0.2518288762785339, -1.2503866132405612, -2.7023017194255026]]
   
   for js in js_list:
      go_to_joint_state(arm_group, js, True)

      raw_input("Press Enter to continue")

   rospy.sleep(1)

   # Robot go home
   go_home(arm_group, True)

   rospy.sleep(1)
   moveit_commander.roscpp_initializer.roscpp_shutdown()

if __name__ == '__main__':
   main()